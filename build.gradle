plugins {
    id 'java'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

group = 'org.domi'
version = '0.1.2'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = group
            artifactId = project.name
            version = version
        }
    }
    repositories {
        maven {
            credentials {
                username = repoUsername
                password = repoPassword
            }
            url = uri("https://nexus.dominicus.kr/repository/dominicus/")
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = 'citizens-repo'
        url = 'https://maven.citizensnpcs.co/repo'
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT")
    compileOnly('net.citizensnpcs:citizens-main:2.0.33-SNAPSHOT') {
        exclude group: '*', module: '*'
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task asUpDateVersion {
    doLast {
        def buildFile = file('build.gradle')

        if (!buildFile.exists()) {
            throw new GradleException("build.gradle 파일을 찾을 수 없습니다.")
        }

        def buildFileContent = buildFile.text
        def versionPattern = ~/(?m)^version\s*=\s*['"](\d+)\.(\d+)\.(\d+)['"]/

        def matcher = versionPattern.matcher(buildFileContent)
        if (!matcher.find()) {
            throw new GradleException("build.gradle 파일에서 버전을 찾을 수 없습니다.")
        }

        def major = matcher.group(1)
        def minor = matcher.group(2)
        def patch = matcher.group(3).toInteger() + 1

        def newVersion = "${major}.${minor}.${patch}"
        def newBuildFileContent = buildFileContent.replaceFirst(versionPattern, "version = '${newVersion}'")

        buildFile.text = newBuildFileContent

        println "버전이 업데이트 되었습니다: ${matcher.group(0)} -> version = '${newVersion}'"

    }
}

asUpDateVersion.finalizedBy('build')
build.finalizedBy('publish')
publish.finalizedBy 'gitCommitAndPush'

task amUpDateVersion {
    doLast {
        def buildFile = file('build.gradle')

        if (!buildFile.exists()) {
            throw new GradleException("build.gradle 파일을 찾을 수 없습니다.")
        }

        def buildFileContent = buildFile.text
        def versionPattern = ~/(?m)^version\s*=\s*['"](\d+)\.(\d+)\.(\d+)['"]/

        def matcher = versionPattern.matcher(buildFileContent)
        if (!matcher.find()) {
            throw new GradleException("build.gradle 파일에서 버전을 찾을 수 없습니다.")
        }

        def major = matcher.group(1)
        def minor = matcher.group(2).toInteger() +1
        def patch = 0

        def newVersion = "${major}.${minor}.${patch}"
        def newBuildFileContent = buildFileContent.replaceFirst(versionPattern, "version = '${newVersion}'")

        buildFile.text = newBuildFileContent

        println "버전이 업데이트 되었습니다: ${matcher.group(0)} -> version = '${newVersion}'"

    }
}

amUpDateVersion.finalizedBy('build')
build.finalizedBy('publish')

task atUpDateVersion {
    doLast {
        def buildFile = file('build.gradle')

        if (!buildFile.exists()) {
            throw new GradleException("build.gradle 파일을 찾을 수 없습니다.")
        }

        def buildFileContent = buildFile.text
        def versionPattern = ~/(?m)^version\s*=\s*['"](\d+)\.(\d+)\.(\d+)['"]/

        def matcher = versionPattern.matcher(buildFileContent)
        if (!matcher.find()) {
            throw new GradleException("build.gradle 파일에서 버전을 찾을 수 없습니다.")
        }

        def major = matcher.group(1).toInteger() + 1
        def minor = 0
        def patch = 0

        def newVersion = "${major}.${minor}.${patch}"
        def newBuildFileContent = buildFileContent.replaceFirst(versionPattern, "version = '${newVersion}'")

        buildFile.text = newBuildFileContent

        println "버전이 업데이트 되었습니다: ${matcher.group(0)} -> version = '${newVersion}'"

    }
}

atUpDateVersion.finalizedBy('build')
build.finalizedBy('publish')

task gitCommitAndPush {
    doLast {
        def buildFile = file('build.gradle')
        def buildFileContent = buildFile.text
        def versionPattern = ~/(?m)^version\s*=\s*['"](\d+)\.(\d+)\.(\d+)['"]/
        def matcher = versionPattern.matcher(buildFileContent)
        matcher.find()
        def newVersion = "${matcher.group(1)}.${matcher.group(2)}.${matcher.group(3)}"

        'git add build.gradle'.execute().text
        def commitMessage = "Update version to ${newVersion}"
        'git commit -m "${commitMessage}"'.execute().text
        'git push'.execute().text

        println "Git 커밋 및 푸시가 완료되었습니다: ${commitMessage}"
    }
}
